
As Scrum Masters, we want to enable our teams to deliver business value. To do so, we must be able to serve the team.

The 8 Stances of a Scrum Master:
Servant Leader/Impediment Remover/Change Agent/
Manager/Coach/Mentor/Facilitator/Teacher

The role is not the same as a project manager. 
The scrum master is only a manager, in that this person is managing the scrum process. 

Ensures the product owner doesn't demand too much from the team in any sprint. 
Helps the development team perform at the highest level possible.

First, the scrum master protects the development team from outside distractions. (Capacity planning? allocation for customer bugs/ division wide activities..)
That means being aware of what the development team members are working on and running interference if a team member's manager is asking them to do work outside of the product backlog. These conversations are not always easy, but it's the job of the scrum master to resolve these distractions.

 The second aspect of protecting the development team falls into the category of protecting them from itself. What I mean by this is that sometimes there will be pressure to overcommit to how much work the development team can do within a sprint. A key hallmark of the Agile Manifesto is that development teams strive to attain a sustainable pace. When a development team overcommits, they're outside the boundaries of agile and scrum. The scrum master will identify the signs of overcommitment and hold the development team accountable to rightsizing their sprint commitment. 
 
  Third, the scrum master protects the development team from complacency. Sometimes when development teams have been together for a while and they're feeling comfortable, they stop looking for ways to improve their activities and interactions. When this happens, the scrum master needs to help the development team identify further growth areas. Sometimes the development team can undercommit to sprints. This is another form of complacency. When the scrum master sees this behavior, it's their duty to push the development team to complete the most work they can with high quality. maximize the value the development team can deliver.
  
 Finally, the scrum master owns the scrum implementation itself. You might wonder what that means. Well, as the process owner, scrum masters can make changes to the scrum processes. They'll accept the development team's input on process changes, but ultimately the decisions on process lie with them. The scrum master will only make changes that remain in alignment with the scrum philosophy and values. 
 For example, I once had a development team that only wanted to hold sprint reviews with our customers every other sprint. I considered their request and declined to make the change. Why? Well, the change was a simple one to make. That much time between demonstrating and getting feedback on our work would not have been in the best interest of the development team, the product owner, or the product. So while the scrum master has no direct authority over development team members, they do have autonomy and authority over the process. When you stay grounded in the scrum framework and lead your development teams to their highest performance, great things happen. You'll help them attain the best implementation of scrum.
 
 Servant Leader:
 -------------------
 - The term servant leader is the one most commonly associated with the role of the scrum master. 
   
When you're a servant, not focused on being the best or the brightest. Your focus is on enabling/serving people and organizations to understand the process and adopt the values and practices related to scrum. The scrum master serves the development team, the PO, and the whole organization.

PO:  coaching the PO on best practices for product backlog management.

Org: The organization doesn't always know how best to support the scrum environment. Since that's the case, the scrum master also needs to serve the organization. They do this by coaching the organization on the right ways to adopt scrum.

Development Team:  coaching the development team on self-organization and becoming cross-functional, 
helping the development team understand the scrum philosophy and values, guiding the development team on the scrum framework, 
facilitating the development team in problem-solving, and removing impediments. 

Team Norms:
---------------------
- While not required by scrum, team norms, or working agreements, are a good thing to establish. When you take the time to lead your scrum team through a norming session, you're helping them move more quickly through the team growth stages of forming, storming, norming, and performing. In essence, you're helping them get to the performance stage faster.
 So what are the topics generally covered by team norms? Let's examine some common categories. Norms should cover the way team members interact with each other. This category covers things like, all opinions, and ideas will be considered equally and thoughtfully. Team members will ask for help as soon as they know they need it. Team members will keep their commitments to each other.
Establishing norms
Selecting transcript lines in this section will navigate to timestamp in the video
- While not required by scrum, team norms, or working agreements, are a good thing to establish. When you take the time to lead your scrum team through a norming session, you're helping them move more quickly through the team growth stages of forming, storming, norming, and performing. In essence, you're helping them get to the performance stage faster. So what goes into team norms? Well, the goal is to help all the individuals express behaviors that will help them perform at the best of their abilities. As the scrum master, and owner of the scrum process, your tasked with helping the scrum team become high performing. Helping the team establish these norms early on helps you get them to high performance faster. So what are the topics generally covered by team norms? Let's examine some common categories. Norms should cover the way team members interact with each other. This category covers things like, all opinions, and ideas will be considered equally and thoughtfully. Team members will ask for help as soon as they know they need it. Team members will keep their commitments to each other. And team members will hold each other accountable to maintaining the team norms. Another area norms often cover is how the team will communicate. In this category, you often see expectations that everyone will speak respectfully to each other, and thank each other for their contributions. Meeting interaction is another common area for team norms. In this category, we see norms like, electronics will be used in meetings only with team consensus and agreement. Further, you can stipulate that meetings will start and end on time, and perhaps the team will prefer there be no meetings before 9:00 a.m. These are common areas on which teams set norms. Decision-making norms are also common among teams. The team may decide that they'll make decisions by consensus. When timely consensus can't be reached, majority will rule and all team members are expected to honor the decision. Finally, it's important to establish norms around conflict resolution. On teams, conflict is practically inevitable, so it's a good idea to establish a norm in this area right away. An example of this type of norm is that team members agree to resolve conflicts among the team members first, before escalating the issue outside the team. This is just a sampling of topics on which norms can be established. There are many more areas you can norm on. At the same time, don't establish so many norms that the team can't keep them straight. I suggest starting with a few norms, and adding more as the team identifies a need. Your team norms are living agreements. What I mean by that, is it's a good idea to revisit your norms every sprint or two. You can add and remove from the list as needed, based on team consensus. While team norms are not required in the scrum framework, it's a very good exercise to establish a few early on. It will help you lead your team to high performance faster.

- Generally, Agile methodologies, as a whole, prefer teams to be co-located. This is recommended because it simplifies communication and collaboration on teams. Further, when team members are seated near each other, they overhear each others' conversations. This is known as Osmotic communication, and can help team members learn from each other and share information in a timely manner. However, co-location by itself doesn't necessarily provide everything team members need to be successful. For example, I was once assigned a conference room to work in with four other people. Sounds like an ideal Agile team space, doesn't it? Well, it wasn't, my conference roommates were very technical, and their work required a lot of intense concentration. My job, however, required me to be on the phone all day with vendors. Needless to say, my roommates didn't like sharing space with me. So what does that tell us about Agile team spaces? Well, it taught me the lesson that co-location is great when you need to collaborate, but it's not so good when you need to focus and concentrate. In the end, I realized that teams need both spaces to share for collaborative work, and spaces to escape to for quiet, focused work. Giving team members both options and allowing them to choose which to use based on their work is ideal. This design idea is called caves and commons, and places quiet rooms close to common areas, allowing people the freedom to decide where they need to be at any given moment. Another common challenge teams face today is the issue of distribution. More and more teams have members scattered across the globe. Since this has become the new normal, it's increasingly important that your team space adapt to the challenge. The easiest way to adapt is to ensure your team members have an electronic space where they can collaborate and share information. Many teams are using an Agile Lifecycle Management tool, like Jira, or VersionOne for this. Some teams are using SharePoint sites or other document repositories. But how to replace that co-located, interpersonal interaction, well, thankfully, we live in a time where platforms for this are abundant. Tools like Slack, Skype, and even FaceTime can help your teams feel like they're co-located even when they're not. No matter what team space you set up for your team, it's important that critical information is available. Having things like your product vision, team norms, and burn charts in your team space will help your team stay focused on the goal. Envision the perfect space for your team. 


 
 
 
 


 
 
 
 
