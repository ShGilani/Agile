Scrum is a framework (Supporting/Guiding Structure) not a methodology (Step by Step way of doing thing). 
It is an additive framework that allows extension, provided the defined elements are met.

There are 3 defined roles, 3 defined artefacts, and 5 events in Scrum. They are supported by some implied elements.

3 together becomes the Scrum Team:
Scrum Master
Development Team
Product Owner

Product Backlog
Sprint Backlog
Product Increment

Sprint
Sprint Planning
Daily Scrum
Sprint Review
Sprint Retrospective

Implied Events and Artefacts:
Backlog Grooming/Product Backlog Refinement
Sprint Goal
Definition of “Done”.


Scrum works in 'Complex Domain'. (Not Simple/Complicated)
It adds most value when there is an element of uncertainty in the requirements and technology, implementation.


A best practice is a practice you use everywhere all the time as the best way to do your work.
The type of work that Scrum teams do is typically 'complex' for any particular practice to always be the best approach, so there’s no such thing as a best practice in Scrum.
We’ve seen many organizations take the idea of “best” practices too far (like with the 500-page manual) that detailed the processes and “best” practices that all their Scrum teams had to follow, which is wrong. We aren’t against teams creating their own practices within the Scrum framework—that’s actually a good sign of a team that’s working well together. 

Key Concepts:
Empiricism
Transparency
Regular/Frequent Inspection & Feedbacks
pull mechanism
Self-organizing Team

intrinsic motivation is achieved through maximising autonomy, mastery and purpose.

Scrum is a very simple framework that's entirely focused on doing just enough preparation, just in time for development work to begin. The founders of Scrum understood that doing too much preparation too far in advance of the work resulted in poor design and a lot of rework, as teams learned more and had to change directions. Because of this insight, they proposed that the detail designs only happen close to when the work is slated to be done. They were interested in postponing all the decisions they could in favor of discovering details within the process of development itself. This maximized the efficiency of the developer.

 The other major shift in Scrum is the role of the business. 
 They recognized it was impossible to deliver exactly what a customer wanted if the developers never got to speak to the customer. 
 To combat this problem, Scrum insists that the customer become part of the team. Simply by making these two changes, Scrum teams immediately began producing better results more quickly than their traditional methodology peers. 
 
 Scrum is easy to understand but difficult to master.
 
  Behind Scrum is the concept of empirical process control. This means that as we do our work, we're learning from our experiences. We make much better decisions when we base them on our experiences.
  
   There are three pillars supporting empirical processes: transparency, inspection, and adaptation.
    Transparency means that for empirical processes to work well, all aspects of the process we're using to do our work must be visible to the people doing it. These people need to understand and agree on what the work is, how the work will be completed, and what done means. Next, inspection means that the team frequently inspects the work they're doing and assesses whether they're moving closer to the goal. Closely related to inspection is adaptation. When teams recognize that their work isn't getting them closer to the goal or done, they adapt their practices and approach to change direction. 
    
   These pillars don't stand alone though. They're supported by the overall Scrum values of commitment, courage, focus, openness, and respect. When Scrum teams abide by these five values, trust is established. This trust then makes it safe to explore, experiment, learn, and solve tough problems.
   
   
   
   
   
