short development cycles
incremental planning approach
Ability to flexibly schedule the implementation of functionality, responding to changing business needs.
Reliance on automated tests to monitor the progress of development, to allow the system to evolve, and to catch defects early.
Reliance on tests, and source code, oral communication to communicate system structure and intent.
reliance on an evolutionary design process that lasts as long as the system lasts.
reliance on the close collaboration of actively engaged individuals with ordinary talent.

 “XP is a lightweight methodology for teams developing software in the face of vague or rapidly changing requirements.” 
 
 XP is lightweight. In XP you only do what you need to do to create value for the customer. You can't carry a lot of baggage and move fast. 
 
 XP can work with teams of any size. The values and principles behind XP are applicable at any scale. 
 
 Requirements need to change to adapt to rapid shifI had begun to notice that the more humanely I treated myself and others, the more productive we all became.
 ts in the modern business world. XP adapts to vague or rapidly changing requirements.
 
 I had begun to notice that the more humanely I treated myself and others, the more productive we all became. Good, safe social interaction is as necessary to successful XP development as good technical skills.
 
 Technique also matters. We are technical people in a technical field. There are better ways and worse ways of working. The pursuit of excellence in technique is critical in a social style of development.
 If you can accurately estimate your work, deliver quality the first time, and create rapid feedback loops; then you can be a trustworthy partner. XP demands that participants learn a high level of technique in service of the team's goals.
 
 XP means giving up old habits of working for new ways tailored to today's reality. The habits, attitudes, and values of our early years worked then; but may not be our best choices in the current world of team software development.
 
 XP Team:
 XP teams play full out to win and accept responsibility for the consequences. 
 Keeping a little distance in relationships, holding back effort through underwork, putting off feedback for another round of responsibility diffusion: none of these behaviors have a place on an XP team.
 
