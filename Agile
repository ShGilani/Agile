  It's easy to misconstrue Agile development as a somewhat loose and fly-by-the-seat-of-your-pants methodology(rely on instinct rather than logic or knowledge.)
 
  For Agile project-tracking, I'd recommend starting with something simple and possibly free, like Pivotal Tracker, Trello, or Airtable. These are basic Kanban boards that you can create user stories, backlogs, and sprints on, without having to train your team on complex software. 
  If you end up needing something more powerful, go ahead and make the jump to JIRA or Hansoft.
 
 Agile Manifesto (Manifesto for Agile Software Development), defines 4 principles to guide you. 
 
 It says we're uncovering better ways of developing software by doing it and helping others do it. Through this work, we have come to 
 value 
 individuals and interactions over processes and tools, //The people and how they interact help us build working software. 
 working software over comprehensive documentation, 
 customer collaboration over contract negotiation, 
 and responding to change over following a plan.
 
 While there's value in the items on the right, we value the items on the left more. 
 
 At its core, the better way is moving away from just passing through project stages and producing documents.
 
 Instead, we're shifting our focus to an empirical process. In an empirical process, the items on the left tell us more than a stack of documents or a date on a timeline can.
 
 Working with our customers enables us to respond to their changes.
 
Supporting the manifesto are the 12 Principles of Agile Software.  Together, the four manifesto values and the 12 supporting principles create the philosophy behind agile. 
These principles should be the filter behind everything you do as a scrum master.


 Uncle Bob's first law of documentation: "Produce no document unless "its need is immediate and significant." So if the answer is no, don't document until you feel it's absolutely necessary. 
 
 agile development runs on the light side of documentation
 
 . Then come deadlines, changing requirements, bugs, client feedback. This can transform an orderly project design into spaghetti code in a matter of weeks.
 
 Avoid Pre-mature Optimization:
  Looking ahead is a great skill, but time is your greatest asset when you're working with Agile. 
  So, be aware of the trade offs between optimizing your code and moving forward with sprint tasks. 
  It's not about solving every problem before it happens. It's about having a foundation that is adaptable enough to handle new problems and features as they come.
  
  
